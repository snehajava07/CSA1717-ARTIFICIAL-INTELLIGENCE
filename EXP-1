import heapq

GOAL = [[1,2,3],[4,5,6],[7,8,0]]
DIRS = {'Up':(-1,0), 'Down':(1,0), 'Left':(0,-1), 'Right':(0,1)}

def manhattan(s):
    return sum(abs((v-1)//3 - i) + abs((v-1)%3 - j)
               for i,row in enumerate(s) for j,v in enumerate(row) if v)

def get_neighbors(s):
    x,y = [(i,j) for i in range(3) for j in range(3) if s[i][j]==0][0]
    for m,(dx,dy) in DIRS.items():
        nx, ny = x+dx, y+dy
        if 0<=nx<3 and 0<=ny<3:
            ns = [r[:] for r in s]
            ns[x][y], ns[nx][ny] = ns[nx][ny], ns[x][y]
            yield ns, m

def solve(start):
    q, seen = [], set()
    heapq.heappush(q, (manhattan(start), 0, start, []))
    while q:
        _, g, s, path = heapq.heappop(q)
        if s == GOAL: return path
        st = tuple(map(tuple, s))
        if st in seen: continue
        seen.add(st)
        for n, m in get_neighbors(s):
            heapq.heappush(q, (g+1+manhattan(n), g+1, n, path+[m]))
    return None

# Test input
start = [[1,2,3],[4,0,6],[7,5,8]]
ans = solve(start)
print("Solution:", " -> ".join(ans) if ans else "No solution")
