import numpy as np
from collections import Counter

# Calculate Gini Impurity
def gini(y):
    counts = Counter(y)
    impurity = 1
    for lbl in counts:
        prob_of_lbl = counts[lbl] / len(y)
        impurity -= prob_of_lbl ** 2
    return impurity

# Split dataset based on feature and threshold
def split_dataset(X, y, feature_index, threshold):
    left_X, right_X, left_y, right_y = [], [], [], []
    for i in range(len(X)):
        if X[i][feature_index] <= threshold:
            left_X.append(X[i])
            left_y.append(y[i])
        else:
            right_X.append(X[i])
            right_y.append(y[i])
    return np.array(left_X), np.array(right_X), np.array(left_y), np.array(right_y)

# Find best split
def best_split(X, y):
    best_gini = float('inf')
    best_index = None
    best_threshold = None
    for feature_index in range(X.shape[1]):
        thresholds = np.unique(X[:, feature_index])
        for threshold in thresholds:
            left_X, right_X, left_y, right_y = split_dataset(X, y, feature_index, threshold)
            if len(left_y) == 0 or len(right_y) == 0:
                continue
            g = (len(left_y) / len(y)) * gini(left_y) + (len(right_y) / len(y)) * gini(right_y)
            if g < best_gini:
                best_gini = g
                best_index = feature_index
                best_threshold = threshold
    return best_index, best_threshold

# Tree Node
class Node:
    def __init__(self, feature_index=None, threshold=None, left=None, right=None, value=None):
        self.feature_index = feature_index
        self.threshold = threshold
        self.left = left
        self.right = right
        self.value = value

# Build Tree Recursively
def build_tree(X, y, depth=0, max_depth=5):
    if len(set(y)) == 1 or depth == max_depth:
        return Node(value=Counter(y).most_common(1)[0][0])
    
    feature_index, threshold = best_split(X, y)
    if feature_index is None:
        return Node(value=Counter(y).most_common(1)[0][0])

    left_X, right_X, left_y, right_y = split_dataset(X, y, feature_index, threshold)
    left = build_tree(left_X, left_y, depth + 1, max_depth)
    right = build_tree(right_X, right_y, depth + 1, max_depth)
    return Node(feature_index, threshold, left, right)

# Prediction
def predict(node, sample):
    if node.value is not None:
        return node.value
    if sample[node.feature_index] <= node.threshold:
        return predict(node.left, sample)
    else:
        return predict(node.right, sample)

# Example usage
if __name__ == "__main__":
    # Simple dataset: [feature1, feature2], label
    X = np.array([[2.7, 2.5],
                  [1.3, 3.3],
                  [3.5, 4.1],
                  [1.0, 1.0],
                  [3.0, 3.0]])
    y = np.array([0, 0, 1, 0, 1])
    
    tree = build_tree(X, y, max_depth=3)
    
    test_sample = np.array([3.1, 3.5])
    print("Prediction:", predict(tree, test_sample))
