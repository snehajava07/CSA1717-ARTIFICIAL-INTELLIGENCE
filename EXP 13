import math

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Check if a player has won
def check_winner(board, player):
    for i in range(3):
        # Check rows and columns
        if all([cell == player for cell in board[i]]) or \
           all([board[j][i] == player for j in range(3)]):
            return True
    # Check diagonals
    if all([board[i][i] == player for i in range(3)]) or \
       all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

# Check if the board is full (for draw condition)
def is_full(board):
    return all(cell != " " for row in board for cell in row)

# Minimax algorithm to compute the best move for AI
def minimax(board, depth, is_maximizing_player):
    if check_winner(board, "X"):  # AI wins
        return 10 - depth
    if check_winner(board, "O"):  # Human wins
        return depth - 10
    if is_full(board):  # Draw
        return 0

    if is_maximizing_player:  # AI's turn (maximize score)
        best = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"  # AI move
                    best = max(best, minimax(board, depth + 1, False))
                    board[row][col] = " "  # Undo move
        return best
    else:  # Human's turn (minimize score)
        best = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"  # Human move
                    best = min(best, minimax(board, depth + 1, True))
                    board[row][col] = " "  # Undo move
        return best

# Function to find the best move for AI using Minimax
def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "O"  # AI's move
                move_val = minimax(board, 0, False)
                board[row][col] = " "  # Undo move
                if move_val > best_val:
                    best_move = (row, col)
                    best_val = move_val
    return best_move

# Main function to run the Tic-Tac-Toe game
def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print("Player 'X' is the human, and Player 'O' is the AI.")
    print_board(board)

    while True:
        # Human's move (Player 'X')
        row, col = map(int, input("Enter row and column (0-2) for your move (e.g., 1 1): ").split())
        if board[row][col] != " ":
            print("Cell already taken! Try again.")
            continue
        board[row][col] = "X"
        
        if check_winner(board, "X"):
            print_board(board)
            print("Player 'X' (Human) wins!")
            break
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI's move (Player 'O')
        print("AI is making its move...")
        ai_move = find_best_move(board)
        board[ai_move[0]][ai_move[1]] = "O"
        
        if check_winner(board, "O"):
            print_board(board)
            print("Player 'O' (AI) wins!")
            break
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        # Print the updated board after each move
        print_board(board)

# Run the game
tic_tac_toe()
