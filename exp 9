from itertools import permutations

def tsp(graph):
    n = len(graph)
    min_cost = float('inf')
    best_path = []

    for perm in permutations(range(1, n)):
        path = [0] + list(perm) + [0]
        cost = sum(graph[path[i]][path[i+1]] for i in range(n))
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# Example distance matrix (symmetric TSP)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

path, cost = tsp(graph)
print("Best path:", path)
print("Minimum cost:", cost)
